function loadData() {
    $("#loadingOverlay").addClass("d-flex");
    const n = {
        a: $("#acc").val()
    };
    $.ajax({
        method: "POST",
        url: "/ufr",
        headers: {
            Authorization: "Bearer " + token
        },
        data: n
    }).done(function(n) {
        $("#loadingOverlay").removeClass("d-flex");
        lv = n.lv;
        lng = n.lng;
        texts = n.texts;
        config = n.config;
        ready("upload-selectedLng", "upload-selectedLv");
        ready("selectedLng", "selectedLv");
        setupChange("upload-selectedLng", "upload-selectedLv");
        setupChange("selectedLng", "selectedLv");
        showFile("selectedLv")
    }).fail(function(n) {
        console.log(n);
        $("#loadingOverlay").removeClass("d-flex");
        n.status == 401 && rediLogin()
    })
}
function ready(n, t) {
    if (n == "upload-selectedLng") {
        var r = $("#upload-selectedLng option:selected").text()
          , u = lng.find(n=>n.label == r)
          , i = u.language;
        createKeyboard("text", i);
        createKeyboard("note", i);
        createKeyboard("note2", i)
    }
    n == "selectedLng" && t == "selectedLv" && processFile()
}
function setupChange(n, t) {
    var i = $(`#${n}`);
    i.on("change", function() {
        if (n == "upload-selectedLng") {
            var r = $("#upload-selectedLng option:selected").text()
              , u = lng.find(n=>n.label == r)
              , i = u.language;
            createKeyboard("text", i);
            createKeyboard("note", i);
            createKeyboard("note2", i)
        }
        n == "selectedLng" && t == "selectedLv" && processFile()
    })
}
function showFile(n) {
    var t = $(`#${n}`);
    t.on("change", function() {
        processFile()
    })
}
function processFile() {
    nameOfFile = "";
    var t = $("#selectedLv").val()
      , i = $("#selectedLng").val()
      , n = texts.filter(n=>n.levelId == t && n.lngId == i && n.slug != "")
      , r = $("#search-newest").is(":checked")
      , u = $("#search-random").is(":checked");
    r ? n = getNewestTexts(n) : u && (n = getRandomElements(n, 5));
    createFileListHtml(n)
}
function rT(n) {
    let t = n.split(" ");
    for (var i = 0; i < t.length; i++)
        t[i] = !/[A-Z]/.exec(t[i][0]) ? t[i] : "<bb>" + t[i] + "<\/bb>";
    return t.join(" ")
}
function createFileListHtml(n) {
    var v, u, l, f, e, i, r, t, a, o, s, h, c;
    for (tempList = [...n],
    $("#totalFile").text(`${n.length} Files`),
    v = document.getElementById("fileList"),
    v.innerHTML = "",
    u = 0; u < n.length; u++)
        u % 3 == 0 && (l = document.createElement("div"),
        l.className = "row",
        v.appendChild(l)),
        f = document.createElement("div"),
        f.className = "col",
        e = document.createElement("div"),
        e.className = "align-self-center dflex-col",
        i = document.createElement("input"),
        i.type = "checkbox",
        i.className = "w-h-21 wh21",
        i.name = "select-for-replay",
        e.appendChild(i),
        r = document.createElement("div"),
        r.className = "div-file-text",
        t = n[u],
        r.id = t.slug,
        i.id = `${t.slug}.mp3`,
        a = document.createElement("p"),
        a.className = "fiP",
        a.innerHTML = `${u + 1}. ${rT(t.textValue)}`,
        r.appendChild(a),
        t.isShare == !1 && (o = document.createElement("div"),
        o.className = "div-action",
        s = document.createElement("img"),
        s.className = "imgAction mgl",
        s.src = "/images/cancel.png",
        h = document.createElement("img"),
        h.className = "imgAction mgr",
        h.src = "/images/write.png",
        config && (c = document.createElement("img"),
        c.className = "mgc",
        c.src = "/images/config.png",
        e.appendChild(c),
        function(n) {
            c.onclick = function() {
                audio.removeEventListener("ended", randomSelectedAudio);
                rediTestConfig(n.id, $("#acc").val())
            }
        }(t)),
        o.appendChild(s),
        o.appendChild(h),
        r.appendChild(o),
        function(n) {
            s.onclick = function() {
                audio.removeEventListener("ended", randomSelectedAudio);
                nameOfFile = n.slug;
                showModal("deleteModal", n)
            }
        }(t),
        function(n) {
            h.onclick = function() {
                audio.removeEventListener("ended", randomSelectedAudio);
                nameOfFile = n.slug;
                showModal("updateModal", n)
            }
        }(t)),
        i.onchange = function() {
            var n = $(".wh21").length === $(".wh21:checked").length
              , t = $('input[type="checkbox"].w-h-24[name="selectAll"]');
            t.prop("checked", n);
            audio.removeEventListener("ended", randomSelectedAudio)
        }
        ,
        f.appendChild(e),
        f.appendChild(r),
        function(n) {
            r.onclick = function() {
                audio.removeEventListener("ended", randomSelectedAudio);
                nameOfFile = n.slug;
                var t = $(".div-file-text");
                t.each(function() {
                    var n = $(this).attr("id");
                    n == nameOfFile ? $(this).addClass("div-file-text-speaking") : $(this).removeClass("div-file-text-speaking")
                });
                playAudio(n.fullSlug);
                showText();
                showNote();
                showNote2()
            }
        }(t),
        l.appendChild(f)
}
function playAudio(n) {
    audio.src = n;
    audio.play()
}
function randomSelectedAudio() {
    var n = [], i;
    if ($(".wh21:checked").each(function() {
        n.push($(this).attr("id"))
    }),
    n.length > 0) {
        var r = Math.floor(Math.random() * n.length)
          , u = n[r]
          , t = texts.findIndex(n=>n.fullSlug.includes(u));
        nameOfFile = texts[t].slug;
        i = $(".div-file-text");
        i.each(function() {
            var n = $(this).attr("id");
            n.includes(nameOfFile) ? $(this).addClass("div-file-text-speaking") : $(this).removeClass("div-file-text-speaking")
        });
        showText();
        showNote();
        showNote2();
        playAudio(texts[t].fullSlug)
    }
}
function set_Temp_Height_For_Float_Div_Not_Override_Content() {
    var n = $(".float-div-text").height();
    $("#tempHeight").attr("style", `height: ${n}px`)
}
function showText() {
    var n = $("#dc2");
    if (nameOfFile != "") {
        var i = $("#selectedLv").val()
          , r = $("#selectedLng").val()
          , t = texts.find(n=>n.slug == nameOfFile && n.levelId == i && n.lngId == r)?.textValue;
        t && ($('input[name="showText"]').is(":checked") ? (n.attr("style", "display: inline-block; margin: 10px 0px;"),
        $("#text-label").text(t),
        $("#imgSpeaker").attr("style", "display: inline-block;")) : (n.attr("style", "display: none;"),
        $("#text-label").text(""),
        $("#imgSpeaker").attr("style", "display: none;")))
    } else
        n.attr("style", "display: none;"),
        $("#text-label").text(""),
        $("#imgSpeaker").attr("style", "display: none;");
    set_Temp_Height_For_Float_Div_Not_Override_Content()
}
function showNote() {
    if (nameOfFile != "") {
        var t = $("#selectedLv").val()
          , i = $("#selectedLng").val()
          , n = texts.find(n=>n.slug == nameOfFile && n.levelId == t && n.lngId == i)?.note;
        n ? $('input[name="showNote"]').is(":checked") ? (showDivNoteLabel(1, !0),
        $("#note-label").text(n)) : (showDivNoteLabel(1, !1),
        $("#note-label").text("")) : (showDivNoteLabel(1, !1),
        $("#note-label").text(""))
    } else
        showDivNoteLabel(1, !1),
        $("#note-label").text("");
    set_Temp_Height_For_Float_Div_Not_Override_Content()
}
function showNote2() {
    if (nameOfFile != "") {
        var t = $("#selectedLv").val()
          , i = $("#selectedLng").val()
          , n = texts.find(n=>n.slug == nameOfFile && n.levelId == t && n.lngId == i)?.note2;
        n ? $('input[name="showNote2"]').is(":checked") ? (showDivNoteLabel(2, !0),
        $("#note-label-2").text(n)) : (showDivNoteLabel(2, !1),
        $("#note-label-2").text("")) : (showDivNoteLabel(2, !1),
        $("#note-label-2").text(""))
    } else
        showDivNoteLabel(2, !1),
        $("#note-label-2").text("");
    set_Temp_Height_For_Float_Div_Not_Override_Content()
}
function showDivNoteLabel(n, t) {
    var i = $(`#div-note-label-${n}`);
    t ? i.show() : i.hide()
}
function readTheContent() {
    audio.pause();
    audio.play()
}
function logout() {
    $("#btnLogout").prop("disabled", !0);
    $.ajax({
        url: "/user-file-logout",
        type: "POST",
        success: function() {
            $("#btnLogout").prop("disabled", !1);
            rediLogin()
        },
        error: function(n) {
            console.log(n);
            setTimeout(function() {
                $("#btnLogin").prop("disabled", !1)
            }, 3e3)
        }
    })
}
function createText() {
    var n = $("#text").val().trim()
      , t = $("#note").val().trim()
      , i = $("#note2").val().trim()
      , r = $("#upload-selectedLng").val()
      , u = $("#upload-selectedLv").val();
    if ($("#create-noti").text(""),
    n == "") {
        $("#create-noti").text("Text to upload is empty!").attr("style", "color: red !important;");
        return
    }
    if (t == "") {
        $("#create-noti").text("Note is empty!").attr("style", "color: red !important;");
        return
    }
    $("#btnCreateText").prop("disabled", !0);
    const f = {
        text: n,
        note: t,
        lngId: r,
        levelId: u,
        note2: i
    };
    $("#loadingOverlay").addClass("d-flex");
    $.ajax({
        method: "POST",
        url: "/create-text",
        headers: {
            Authorization: "Bearer " + token
        },
        data: f
    }).done(function(n) {
        $("#loadingOverlay").removeClass("d-flex");
        texts = n.texts;
        processFile();
        $("#create-noti").text("Created!").attr("style", "color: blue !important;");
        $("#btnCreateText").prop("disabled", !1);
        $("#text").val("");
        $("#note").val("");
        $("#note2").val("")
    }).fail(function(n) {
        console.log(n);
        $("#loadingOverlay").removeClass("d-flex");
        n.status == 401 && rediLogin();
        $("#create-noti").text(n.responseJSON).attr("style", "color: red !important;");
        setTimeout(function() {
            $("#create-noti").text("");
            $("#btnCreateText").prop("disabled", !1)
        }, 3e3)
    })
}
function selectAll(n) {
    $(".wh21").prop("checked", n.checked);
    audio.removeEventListener("ended", randomSelectedAudio)
}
function expand() {
    isExpanded = !isExpanded;
    var n = $("#fileUploadDiv")
      , t = n.prop("scrollHeight");
    isExpanded ? (n.animate({
        "max-height": t
    }, 500),
    $("#expand-action").attr("src", "/images/reduce.png")) : (n.css("max-height", t),
    n.animate({
        "max-height": 0
    }, 500),
    $("#expand-action").attr("src", "/images/expand.png"))
}
function handleDebouncedSearch() {
    clearTimeout(searchTimer);
    searchTimer = setTimeout(()=>{
        const n = $("#search").val().trim();
        performSearch(n)
    }
    , 1e3)
}
function performSearch(n) {
    for (var t, i, a, f = n.toLowerCase(), e = [], v = $("#selectedLv").val(), y = $("#selectedLng").val(), l = texts.filter(n=>n.levelId == v && n.lngId == y && n.slug != ""), u = f.split(" "), o = 0; o < l.length; o++) {
        var s = l[o]
          , h = s.textValue.toLowerCase()
          , c = s.note.toLowerCase()
          , r = 0
          , p = h.split(" ")
          , w = c.split(" ");
        for (t = 0; t < u.length; t++)
            i = u[t],
            (p.includes(i) || w.includes(i)) && (r += 3);
        for ((h.includes(f) || c.includes(f)) && (r += 2),
        t = 0; t < u.length; t++)
            i = u[t],
            (h.includes(i) || c.includes(i)) && (r += 1);
        r > 0 && e.push({
            item: s,
            matchScore: r
        })
    }
    e.sort(function(n, t) {
        return t.matchScore - n.matchScore
    });
    a = e.map(function(n) {
        return n.item
    });
    processFileWhenSearch(a)
}
function processFileWhenSearch(n) {
    nameOfFile = "";
    var t = $("#search-newest").is(":checked")
      , i = $("#search-random").is(":checked");
    t ? n = getNewestTexts(n) : i && (n = getRandomElements(n, 5));
    createFileListHtml(n)
}
function deleteText() {
    nameOfFile = "";
    const n = {
        id: actionData.id
    };
    $("#btnDelete").prop("disabled", !0);
    $("#notifyDelete").text("");
    $("#loadingOverlay").addClass("d-flex");
    $.ajax({
        method: "POST",
        url: "/delete-text",
        headers: {
            Authorization: "Bearer " + token
        },
        data: n
    }).done(function(n) {
        console.log(n);
        closeModal("deleteModal");
        $("#btnDelete").prop("disabled", !1);
        $("#loadingOverlay").removeClass("d-flex");
        texts = texts.filter(n=>n.id != actionData.id);
        processFile();
        showText();
        showNote();
        showNote2()
    }).fail(function(n) {
        $("#loadingOverlay").removeClass("d-flex");
        n.status == 401 && rediLogin();
        console.log(n);
        $("#notifyDelete").text(n.responseJSON).attr("style", "color: red !important;");
        setTimeout(function() {
            $("#notifyDelete").text("");
            $("#btnDelete").prop("disabled", !1)
        }, 3e3)
    })
}
function setupUpdate(n) {
    $("#updateTextContent").val(n.textValue);
    $("#updateNote1").val(n.note);
    $("#updateNote2").val(n.note2)
}
function updateText() {
    nameOfFile = "";
    const n = $("#updateTextContent").val().trim()
      , t = $("#updateNote1").val().trim()
      , i = $("#updateNote2").val().trim()
      , r = actionData.id
      , u = actionData.levelId
      , f = actionData.lngId
      , e = actionData.slug;
    if ($("#notifyUpdate").text(""),
    n == "") {
        $("#notifyUpdate").text("Text to upload is empty!").attr("style", "color: red !important;");
        return
    }
    if (t == "") {
        $("#notifyUpdate").text("Note is empty!").attr("style", "color: red !important;");
        return
    }
    $("#btnUpdate").prop("disabled", !0);
    const o = {
        id: r,
        text: n,
        note: t,
        note2: i,
        lngId: f,
        levelId: u,
        slug: e
    };
    $("#loadingOverlay").addClass("d-flex");
    $.ajax({
        method: "POST",
        url: "/update-text",
        headers: {
            Authorization: "Bearer " + token
        },
        data: o
    }).done(function(n) {
        $("#loadingOverlay").removeClass("d-flex");
        $("#notifyUpdate").text("Updated!").attr("style", "color: blue !important;");
        $("#btnUpdate").prop("disabled", !1);
        texts = n.texts;
        processFile();
        showText();
        showNote();
        showNote2()
    }).fail(function(n) {
        $("#loadingOverlay").removeClass("d-flex");
        n.status == 401 && rediLogin();
        console.log(n);
        $("#notifyUpdate").text(n.responseJSON).attr("style", "color: red !important;");
        setTimeout(function() {
            $("#notifyUpdate").text("");
            $("#btnUpdate").prop("disabled", !1)
        }, 3e3)
    })
}
function closeModal(n) {
    var t = $(`#${n}`);
    t.attr("style", "display: none;")
}
function showModal(n, t) {
    $(`#${n}`).attr("style", "display: block;");
    actionData = t;
    n == "deleteModal" ? $("#actionDelHeader").text(`Delete ${t.textValue}`) : ($("#actionUpdateHeader").text(`Update`),
    setupUpdate(t))
}
function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: "smooth"
    })
}
function scrollToBottom() {
    window.scrollTo({
        top: document.body.scrollHeight,
        behavior: "smooth"
    })
}
function getNewestTexts(n) {
    var t = n.sort(function(n, t) {
        return new Date(t.createdDate) - new Date(n.createdDate)
    })
      , i = [];
    for (let n = 0; n < 5 && n < t.length; n++)
        i.push(t[n]);
    return i
}
function NoR(n) {
    $("#sort").prop("checked", !1);
    $("#shortest5").prop("checked", !1);
    $("#longest5").prop("checked", !1);
    $(`#${n}`).prop("checked", !1);
    const t = $("#search").val().trim();
    t.length == 0 ? processFile() : handleDebouncedSearch()
}
function shortlong(n, t, i) {
    if ($("#sort").prop("checked", !1),
    $("#search-newest").prop("checked", !1),
    $("#search-random").prop("checked", !1),
    $(`#${n}`).prop("checked", !1),
    i.checked) {
        var r = sort(t);
        r.length < 5 ? createFileListHtml(r) : (r = getRandomElements(r, 5),
        createFileListHtml(r))
    } else
        processFile()
}
function testing(n) {
    var e, c, o, s, u, h, t;
    nameOfFile = "";
    var y = $("#selectedLv").val()
      , p = $("#selectedLng").val()
      , i = [...texts].filter(n=>n.levelId == y && n.lngId == p)
      , f = $("#search").val().trim();
    if (f.length > 0) {
        for (e = [],
        c = f.split(" "),
        o = 0; o < i.length; o++) {
            var l = i[o]
              , a = l.textValue.toLowerCase()
              , v = l.note.toLowerCase()
              , r = 0
              , w = a.split(" ")
              , b = v.split(" ");
            for (s = 0; s < c.length; s++)
                u = c[s],
                (w.includes(u) || b.includes(u)) && (r += 3),
                (a.includes(u) || v.includes(u)) && (r += 1);
            (a.includes(f) || v.includes(f)) && (r += 2);
            r > 0 && e.push({
                item: l,
                matchScore: r
            })
        }
        e.sort(function(n, t) {
            return t.matchScore - n.matchScore
        });
        i = e.map(function(n) {
            return n.item
        })
    }
    h = [];
    $(".wh21:checked").each(function() {
        h.push($(this).attr("id"))
    });
    t = getRandomElements(i, 5);
    h.length < 5 ? createListForTest(t, n) : (t = i.filter(n=>h.some(t=>t === `${n.slug}.mp3`)),
    t = getRandomElements(t, 5),
    createListForTest(t, n))
}
function getLongestWord(n) {
    let t = "";
    for (let i = 0; i < n.length; i++) {
        const r = n[i];
        r.length > t.length && (t = r)
    }
    return t
}
function createListForTest(n, t) {
    var s, i, e, f, o, r, u, h, c;
    for ($("#totalFile").text(`${n.length} Files`),
    s = document.getElementById("fileList"),
    s.innerHTML = "",
    i = 0; i < n.length; i++)
        i % 3 == 0 && (e = document.createElement("div"),
        e.className = "row",
        s.appendChild(e)),
        f = document.createElement("div"),
        f.className = "col",
        o = document.createElement("div"),
        o.className = "align-self-center",
        r = document.createElement("input"),
        r.type = "checkbox",
        r.className = "w-h-21 wh21",
        r.name = "select-for-replay",
        o.appendChild(r),
        u = document.createElement("div"),
        u.className = "div-file-text",
        h = n[i].slug,
        u.id = h,
        r.id = `${h}.mp3`,
        c = n[i],
        u.innerHTML = t == "listen" ? `${i + 1}` : `${i + 1}. ${c.note}`,
        r.onchange = function() {
            var n = $(".wh21").length === $(".wh21:checked").length
              , t = $('input[type="checkbox"].w-h-24[name="selectAll"]');
            t.prop("checked", n);
            audio.removeEventListener("ended", randomSelectedAudio)
        }
        ,
        f.appendChild(o),
        f.appendChild(u),
        function(n, t, i) {
            let r = 1;
            u.onclick = function() {
                var u, f, e;
                if (audio.removeEventListener("ended", randomSelectedAudio),
                i == "listen")
                    switch (r) {
                    case 1:
                        break;
                    case 2:
                        u = t.textValue.split(" ");
                        f = getLongestWord(u);
                        this.innerHTML = `${n + 1}. ${f}`;
                        break;
                    case 3:
                        this.innerHTML = `${n + 1}. ${t.textValue}`;
                        break;
                    default:
                        this.innerHTML = `${n + 1}`;
                        r = 1
                    }
                else {
                    u = t.textValue.split(" ");
                    switch (r) {
                    case 1:
                        f = getLongestWord(u);
                        this.innerHTML = `${n + 1}. ${f}`;
                        break;
                    case 2:
                        if (u.length < 1)
                            break;
                        this.innerHTML = u.length > 1 ? `${n + 1}.${u[u.length - 2]} ${u[u.length - 1]}` : `${n + 1}.${u[u.length - 1]}`;
                        break;
                    case 3:
                        this.innerHTML = `${n + 1}.${t.textValue}`;
                        break;
                    default:
                        this.innerHTML = `${n + 1}.${t.note}`;
                        r = 0
                    }
                }
                r += 1;
                nameOfFile = t.slug;
                e = $(".div-file-text");
                e.each(function() {
                    var n = $(this).attr("id");
                    n == nameOfFile ? $(this).addClass("div-file-text-speaking") : $(this).removeClass("div-file-text-speaking")
                });
                playAudio(t.fullSlug);
                showText();
                showNote();
                showNote2()
            }
        }(i, c, t),
        e.appendChild(f)
}
function getRandomElements(n, t) {
    var i = [...n], u = [], r = i.length, e, f;
    if (r <= t)
        return i;
    while (r > 0 && u.length < t)
        f = Math.floor(Math.random() * r),
        r--,
        e = i[r],
        i[r] = i[f],
        i[f] = e,
        u.includes(i[r]) || u.push(i[r]);
    return u
}
function replaceString(n) {
    return n.replaceAll("?", "").replaceAll("!", "").replaceAll(".", "").replaceAll(",", "").replaceAll(":", "").replace(/\s\s+/g, " ").replaceAll("\n", " ")
}
function sort(n) {
    var r = $("#selectedLv").val(), u = $("#selectedLng").val(), t = [...texts].filter(n=>n.levelId == r && n.lngId == u), i;
    if (n == 0 ? (t = t.sort(function(n, t) {
        var i = replaceString(n.textValue).split(" ").length
          , r = replaceString(t.textValue).split(" ").length;
        return i < r ? -1 : i < r ? 1 : 0
    }),
    console.log(t)) : t = n == 1 ? t.filter(n=>replaceString(n.textValue).split(" ").length < 8) : t.filter(n=>replaceString(n.textValue).split(" ").length > 7),
    n == 0)
        i = $("#sort").is(":checked"),
        $("#search-random").prop("checked", !1),
        $("#search-newest").prop("checked", !1),
        $("#shortest5").prop("checked", !1),
        $("#longest5").prop("checked", !1),
        i ? createFileListHtml(t) : processFile();
    else
        return t
}
function toggleRepeat(n, t) {
    repeatInterval && clearInterval(repeatInterval);
    n == 1 ? $("#repeatSpeak").prop("checked", !1) : $("#repeatText").prop("checked", !1);
    t.checked && (repeatInterval = setInterval(function() {
        n == 1 ? repeatText() : rSpeak(!0)
    }, 1e3))
}
function repeatText() {
    var r = $("#selectedLv").val(), u = $("#selectedLng").val(), t = [...tempList].filter(n=>n.levelId == r && n.lngId == u), i, n;
    if (t = getRandomElements(t, 1),
    t.length > 0 && !responsiveVoice.isPlaying()) {
        currText = t[0];
        i = t[0].textValue.replaceAll('"', "").replaceAll("-", "").replaceAll("?", "").replaceAll("!", "").replaceAll(",", "").replaceAll(":", "").replace(/\s\s+/g, " ").replaceAll("\n", " ").split(" ");
        n = getRandomElements(i, 1);
        /^[0-9]/.test(n[0]) || (n[0] = n[0].replaceAll(".", ""));
        const r = document.getElementById("rText")
          , u = r.parentElement
          , f = u.offsetWidth
          , e = f / 100;
        r.style.fontSize = `calc(12px + (${e}px * 20) - ${n[0].length * 2}px)`;
        r.innerHTML = n[0];
        shRepText(!1)
    }
}
function rSpeak(n) {
    var n, i, t, r, u;
    responsiveVoice.isPlaying() || (n == !0 && repeatText(),
    n = $("#rText").text(),
    n.trim().length > 0 && (i = $("#selectedLng").val(),
    t = lng.find(n=>n.id == i),
    t && (r = t.language,
    u = setupVoice(r),
    responsiveVoice.speak(n, u))))
}
function setupVoice(n) {
    const t = Math.random();
    switch (n) {
    case "de":
        return t < .7 ? "Deutsch Male" : "Deutsch Female";
    case "ja":
        return t < .7 ? "Japanese Male" : "Japanese Female";
    case "vn":
        return t < .7 ? "Vietnamese Male" : "Vietnamese Female";
    case "ko":
        return t < .7 ? "Korean Male" : "Korean Female";
    case "cn":
        return t < .7 ? "Chinese Male" : "Chinese Female";
    default:
        return t < .7 ? "US English Male" : "US English Female"
    }
}
function shRepText(n) {
    var i, t;
    if (currText)
        if (i = $("#frt").position().top,
        $("#sfrt").attr("style", `bottom: calc(100vh - ${i}px)`),
        t = $("#dc1"),
        n == !0 && (sfrt = !sfrt),
        sfrt) {
            t.attr("style", "display: inline-block; margin: 10px 0px;");
            var r = $("#rText").text()
              , u = currText.textValue.replace(r, '<span style="color: black;">_____________<\/span>')
              , f = currText.note;
            $("#rTextLabel").html(u);
            $("#rNoteLabel").text(f);
            $("#imgSpeaker2").attr("style", "display: inline-block;");
            showDivNoteLabel(3, !0)
        } else
            t.attr("style", "display: none;"),
            $("#rTextLabel").text(""),
            $("#rNoteLabel").text(""),
            $("#imgSpeaker2").attr("style", "display: none;"),
            showDivNoteLabel(3, !1)
}
function rediTest() {
    var n = $("#selectedLv").val()
      , t = $("#selectedLng").val();
    rediDoEx(n, t)
}
var lv = [], lng = [], texts = [], token = $("#uto").val(), config = !1, nameOfFile, audio, isExpanded, searchTimer, actionData;
$(document).ready(function() {
    loadData()
});
nameOfFile = "";
let tempList = [];
audio = new Audio;
audio.addEventListener("ended", function() {
    setTimeout(randomSelectedAudio, 2e3)
});
isExpanded = !0;
actionData = null;
let repeatInterval;
let currText;
let sfrt = !1;



function handleClickHam(x) {
    x.classList.toggle('change')
    $('.navigation').toggleClass('change')
}